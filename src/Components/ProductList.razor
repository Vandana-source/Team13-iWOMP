@using ContosoCrafts.WebSite.Models
@using ContosoCrafts.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
<link rel="stylesheet" href="~/css/site.css" />

<div id="neighborhoodDropdown">
    <div class="filter-option">
        <select class="filter-button" @onchange="OnNeighborhoodChanged">
            <option value="">Neighborhood</option>
            @foreach (var neighborhood in Neighborhoods)
            {
                <option value="@neighborhood">@neighborhood</option>
            }
        </select>
    </div>
    <div class="filter-option">
        <select class="filter-button" @onchange="OnLocationTypeChanged">
            <option value="">Location Type</option>
            <option value="Bench">BenchðŸª‘</option>
            <option value="Restroom">Restroom</option>
            <option value="Table">Table</option>
            <option value="Other">Other</option>
        </select>
    </div>
    <div class="filter-option">
        <select class="filter-button" @onchange="OnNoiseLevelTypeChanged">
            <option value="">Noise Level</option>
            @for (int i = 1; i <= 10; i++)
            {
                <option value="@i">@i</option>
            }
        </select>
    </div>
</div>


<div class="card-columns">
    @foreach (var product in FilterProducts())
    {
        <div class="card">
            <div class="card-img" style="background-image: url('@product.Image');"></div>
            <div class="card-body">
                <h5 class="card-title">@product.Title</h5>
                <h7>Neighborhood: </h7>
                <h7 class="card-title">@product.Neighborhood</h7>
                <p class="card-text">@product.LocationType</p>
            </div>
            <div class="card-footer">
                <small class="text-muted">
                    <!-- Updated data-target to point to a unique modal ID based on the product ID -->
                    <button data-toggle="modal" data-target="#productModal-@product.Id" class="btn btn-primary">
                        More Info
                    </button>
                </small>
            </div>
        </div>

        <!-- Unique modal for each product -->
        <div class="modal fade" id="productModal-@product.Id" tabindex="-1" role="dialog" aria-labelledby="productTitle-@product.Id" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="productTitle-@product.Id">@product.Title</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <div class="card">
                            <div class="card-img" style="background-image: url('@product.Image');"></div>
                            <div class="card-body">
                                <p class="card-text">@product.Description</p>
                                <br />
                                <p class="card-text">Fun Facts : <mark>@product.FunFacts</mark></p>
                                <!-- Button to toggle the map -->
                                <div class="d-flex align-items-center justify-content-between map-toggler"
                                     data-toggle="collapse"
                                     data-target="#mapCollapse-@product.Id"
                                     aria-expanded="false"
                                     aria-controls="mapCollapse-@product.Id">
                                    <span>Show Map</span>
                                    <i class="fas fa-chevron-down"></i>
                                    <i class="fas fa-chevron-up d-none"></i>
                                </div>
                                <br />
                                <!-- The Map wrapped inside a collapsible div -->
                                <div class="collapse" id="mapCollapse-@product.Id">
                                    <iframe src="@product.MapURL" allowfullscreen></iframe>
                                </div>
                            </div>
                        </div>
                        <button type="button" class="btn btn-info share-button-margin" data-toggle="collapse" data-target="#share">Share : </button>
                        <br />
                        <br />
                        <div class="container image-row collapse" id="share">
                            <!-- Sharingbutton Facebook -->
                            @{
                                string fblink = "https://facebook.com/sharer/sharer.php?u=https%3A%2F%2Ftakeabreak.azurewebsites.net%2FProduct%2FRead%2F" + product.Id;
                            }
                            <a class="btn text-white" style="background-color: #3b5998;" href="@fblink" role="button">
                                <i class="fab fa-facebook-f"></i>
                            </a>

                            <!-- Sharingbutton Twitter -->
                            @{
                                string tlink = "https://twitter.com/share?text=Look%2C%20I%20found%20a%20good%20place%20to%20rest%20and%20Take%20a%20Break!!%20Check%20it%20out.&amp&url=https%3A%2F%2Ftakeabreak.azurewebsites.net%2FProduct%2FRead%2F" + product.Id;
                            }
                            <a class="btn text-white" style="background-color: #55acee;" href="@tlink" role="button">
                                <i class="fab fa-twitter"></i>
                            </a>

                            <!-- Sharingbutton E-Mail -->
                            @{
                                string elink = "mailto:?subject=Look%2C%20I%20found%20a%20good%20place%20to%20rest%20and%20Take%20a%20Break!!%20Check%20it%20out.&amp&body=https%3A%2F%2Ftakeabreak.azurewebsites.net%2FProduct%2FRead%2F" + product.Id;
                            }
                            <a class="btn text-white" style="background-color: #332D2D;" href="@elink" role="button">
                                <i class="far fa-envelope"></i>
                            </a>

                            <!-- Sharingbutton Pinterest -->
                            @{
                                string plink = "https%3A%2F%2Ftakeabreak.azurewebsites.net%2FProduct%2FRead%2F" + product.Id + "&amp";
                            }
                            <a class="btn text-white" style="background-color: #c61118;" href="https://pinterest.com/pin/create/button/?url=https%3A%2F%2Ftakeabreak.azurewebsites.net%2FProduct%2FRead%2Fabc&amp;media=@plink;description=Look%2C%20I%20found%20a%20good%20place%20to%20rest%20and%20Take%20a%20Break!!%20Check%20it%20out." role="button">
                                <i class="fab fa-pinterest"></i>
                            </a>

                            <!-- Sharingbutton LinkedIn -->
                            @{
                                string llink = "https%3A%2F%2Ftakeabreak.azurewebsites.net%2FProduct%2FRead%2F" + product.Id;
                            }
                            <a class="btn text-white" style="background-color: #0082ca;" href="https://www.linkedin.com/sharing/share-offsite/?url=@llink&title=Look%2C%20I%20found%20a%20good%20place%20to%20rest%20and%20Take%20a%20Break!!%20Check%20it%20out." role="button">
                                <i class="fab fa-linkedin-in"></i>
                            </a>

                            <!-- Sharingbutton WhatsApp -->
                            @{
                                string wlink = "https://api.whatsapp.com/send?text=Look%2C%20I%20found%20a%20good%20place%20to%20rest%20and%20Take%20a%20Break!!%20Check%20it%20out.%20https%3A%2F%2Ftakeabreak.azurewebsites.net%2FProduct%2FRead%2F" + product.Id;
                            }
                            <a class="btn text-white" style="background-color: #25d366;" href="@wlink" role="button">
                                <i class="fab fa-whatsapp"></i>
                            </a>

                            <!-- Sharingbutton Telegram -->
                            @{
                                string telegramLink = "https%3A%2F%2Ftakeabreak.azurewebsites.net%2FProduct%2FRead%2F" + product.Id;
                            }
                            <a class="btn text-white" style="background-color: #229ED9;" href="https://t.me/share/url?url=@telegramLink&text=Look%2C%20I%20found%20a%20good%20place%20to%20rest%20and%20Take%20a%20Break!!%20Check%20it%20out." role="button">
                                <i class="fab fa-telegram"></i>
                            </a>
                        </div>
                    </div>

                    <div class="modal-footer">
                        @if (product.Ratings == null || !product.Ratings.Any())
                        {
                            <span>Be the first to vote!</span>
                        }
                        else
                        {
                            <span>@product.Ratings.Count() @(product.Ratings.Count() == 1 ? "Vote" : "Votes")</span>
                        }
                        <!-- Updated the for loop to use product ID -->
                        @for (int i = 1; i <= 5; i++)
                        {
                            var currentStar = i;
                            <span class="fa fa-star @(product.Ratings != null && i <= product.Ratings.Average() ? "checked" : "")" @onclick="(e => SubmitRating(product.Id, currentStar))"></span>
                        }
                    </div>

                    <button type="button" class="btn btn-info" data-toggle="collapse" data-target="#demo">Comments</button>

                    <div class="modal-footer">
                        @*First show all the existing comments*@
                        <div class="container collapse" id="demo">
                            @{
                                foreach (var comment in product.CommentList)
                                {
                                    <div class="row">
                                        @comment
                                    </div>
                                }

                                // If this is a new comment, then add the Input boxes for it, else show the Add Comment Button
                                if (NewComment)
                                {
                                    <div class="row text-center">
                                        <div class="col">
                                            <input class="shadow-7 border" type="text" @onchange="(e) => UpdateCommentText(e.Value.ToString())" value="@NewCommentText" id="CommentInput" />
                                        </div>
                                    </div>
                                    <br />
                                    <div class="row text-center">
                                        <div class="col">
                                            <button @onclick="(e => AddComment(product,NewCommentText))" class="btn btn-outline-success" data-mdb-ripple-color="dark" data-toggle="modal">Save Comment</button>
                                            <button type="button" class="btn btn-outline-danger" data-mdb-ripple-color="dark" data-dismiss="modal">Cancel</button>
                                        </div>
                                    </div>
                                }

                                // If this is not a new comment, then show the buttons for Adding comment and Close
                                if (NewComment == false)
                                {
                                    <div class="row text-center">
                                        <div class="col-sm">
                                            <button @onclick="(e => ShowNewCommentInput())" id="AddComment" class="btn btn-outline-primary" data-mdb-ripple-color="dark">Add Comment</button>
                                            <button type="button" class="btn btn-outline-danger" data-mdb-ripple-color="dark" data-dismiss="modal">Close</button>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                    </div>

                </div>
            </div>
        </div>
    }
</div>

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

@code {

    // Variable to get all the products, Neighborhoods (for drop down)
    private IEnumerable<ProductModel> Products => ProductService.GetProducts();
    private IEnumerable<string> Neighborhoods => Products
        .Select(p => p.Neighborhood)
        .Distinct()
        .OrderBy(n => n);

    // The neighborhood selected from drop down
    private string selectedNeighborhood;

    // The location type selected from drop down
    [Parameter]
    public string selectedLocationType { get; set; }

    // The noise level type selected from drop down
    private int? selectedNoiseLevel;

    // Computed method to get the filtered list of products
    private List<ProductModel> FilterProducts()
    {
        // Implement logic to filter products based on the Filter parameter
        // For example:
        System.Console.WriteLine($"Rating received for product {selectedLocationType}");
        if (selectedLocationType == "All")
        {
            return Products.ToList();
        }
        var filteredProducts = Products
            .Where(p =>
                (string.IsNullOrWhiteSpace(selectedNeighborhood) || p.Neighborhood.Equals(selectedNeighborhood, StringComparison.OrdinalIgnoreCase)) &&
                (string.IsNullOrWhiteSpace(selectedLocationType) || p.LocationType.Equals(selectedLocationType, StringComparison.OrdinalIgnoreCase)) &&
                (!selectedNoiseLevel.HasValue || p.NoiseLevel == selectedNoiseLevel.Value)
            ).ToList();
        return filteredProducts;
    }

    /// <summary>
    /// Event callback for when drop down neighborhood changes
    ///</summary>
    private void OnNeighborhoodChanged(ChangeEventArgs e)
    {
        selectedNeighborhood = e.Value?.ToString();

        // Trigger a re-render of the component
        StateHasChanged();
    }

    /// <summary>
    /// Event callback for when drop down LocationType changes
    ///</summary>
    private void OnLocationTypeChanged(ChangeEventArgs e)
    {
        selectedLocationType = e.Value?.ToString();

        // Trigger a re-render of the component
        StateHasChanged();
    }

    /// <summary>
    /// Event callabck for when drop down NoiseLevel changes
    /// </summary>
    private void OnNoiseLevelTypeChanged(ChangeEventArgs e)
    {

        // Try to get the noise level
        if (int.TryParse(e.Value?.ToString(), out int result))
        {
            selectedNoiseLevel = result;
        }
        else
        {
            // Reset or handle the invalid input appropriately
            selectedNoiseLevel = null;
        }

        // Trigger a re-render of the component
        StateHasChanged();
    }

    /// <summary>
    /// Event callabck for when ratings change
    /// </summary>
    void SubmitRating(string productId, int rating)
    {
        System.Console.WriteLine($"Rating received for product {productId}: {rating}");
        ProductService.AddRating(productId, rating);
    }

    // New Comment Flag to show the input box or not
    bool NewComment = false;

    // Next Comment Text is what the comment text is
    string NewCommentText = string.Empty;

    //Date time for the comment
    string timestamp = DateTime.Now.ToString("MM/dd/yyyy h:mm tt") + " - ";

    /// <summary>
    /// Enable the New Comment Entry by setting the NewComment flag
    /// </summary>
    /// <param name="comment"></param>
    void ShowNewCommentInput()
    {
        // Setting the new Comment flag to true will show the input box
        NewComment = true;
    }

    /// <summary>
    /// Set the New Comment Text variable to the data just entered in the input box
    /// </summary>
    /// <param name="newCommentText"></param>
    void UpdateCommentText(string newCommentText)
    {
        NewCommentText = newCommentText;
    }

    /// <summary>
    /// Add the comment to the product
    /// Best to refactor this to be a method to call in the Middle Tier Data service, rathern than putting the logic here...
    /// </summary>
    /// <param name="comment"></param>
    void AddComment(ProductModel selectedProduct, string NewCommentText)
    {
        // Comment should not be empty 
        if(string.IsNullOrWhiteSpace(NewCommentText))
        {
            NewComment = false;
        }
        else
        {
            NewCommentText = timestamp + NewCommentText;
            // Add it to the Comment List
            bool result = ProductService.AddComment(selectedProduct.Id, NewCommentText);

            // Set the NewComment flag to false to hide the input box
            NewComment = false;
        }
    }
}