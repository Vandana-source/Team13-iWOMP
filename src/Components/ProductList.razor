@using System.ComponentModel.DataAnnotations
@using System.Reflection
@using TakeABreak.WebSite.Models
@using TakeABreak.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop
@using TakeABreak.WebSite.Enums
@inject JsonFileProductService ProductService
@inject IJSRuntime JSRuntime

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
<link rel="stylesheet" href="~/css/site.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
<link rel='stylesheet' href='https://cdn-uicons.flaticon.com/2.0.0/uicons-bold-straight/css/uicons-bold-straight.css'>

<div id="filter-bar" class="sticky-top">
    <div class="container pb-3">
        <div class="d-flex flex-wrap align-items-center">

            <!-- Neighborhood Dropdown -->
            <div class="filter-option mr-2">
                <div class="dropdown">
                    <button class="btn btn-third dropdown-toggle" type="button" id="neighborhoodDropdownButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        @if (string.IsNullOrEmpty(SelectedNeighborhood))
                        {
                            <i class="fi fi-bs-house-building" style="font-size: 20px; margin-right: 6px;"></i><text>Neighborhoods</text>
                        }
                        else
                        {
                            @SelectedNeighborhood
                        }
                    </button>
                    <div class="dropdown-menu" aria-labelledby="neighborhoodDropdownButton">
                        <button class="dropdown-item" type="button" test-id="dropdown1" @onclick='() => UpdateNeighborhood(null)'>
                            All
                        </button>
                        @foreach (var neighborhood in Neighborhoods)
                        {
                            <button class="dropdown-item" type="button" test-id="dropdown2" @onclick="() => UpdateNeighborhood(neighborhood)">
                                @neighborhood
                            </button>
                        }
                    </div>
                </div>
            </div>
            <!-- Location Type Dropdown -->
            <div class="filter-option">
                <div class="dropdown">
                    <button class="btn btn-third dropdown-toggle" type="button" id="dropdownMenuButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        @if (string.IsNullOrEmpty(SelectedLocationType))
                        {
                            <i class="fi fi-bs-map-marker-home" style="font-size: 20px; margin-right:6px;"></i><text>Location Type</text>
                        }
                        else
                        {
                            if (SelectedLocationType.Equals(surpriseString))
                            {
                                isSurprise();
                            }
                            @SelectedLocationType
                        }
                    </button>
                    <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                        <button class="dropdown-item" type="button" test-id="dropdown3" @onclick='() => UpdateLocationType(null)'>
                            All
                        </button>
                        <button class="dropdown-item" type="button" test-id="dropdown4" @onclick='() => UpdateLocationType("Bench")'>
                            <i class="fas fa-chair mr-2"></i> Bench
                        </button>
                        <button class="dropdown-item" type="button" test-id="dropdown5" @onclick='() => UpdateLocationType("Restroom")'>
                            <i class="fas fa-restroom mr-2"></i> Restroom
                        </button>
                        <button class="dropdown-item" type="button" test-id="dropdown6" @onclick='() => UpdateLocationType("Table")'>
                            <i class="fi fi-bs-table-picnic mr-2"></i> Table
                        </button>
                        <button class="dropdown-item" type="button" test-id="dropdown7" @onclick='() => UpdateLocationType("Other")'>
                            <i class="fas fa-ellipsis-h mr-2"></i> Other
                        </button>
                    </div>

                </div>
            </div>
            
            <!-- Noise Level Dropdown -->
            <div class="filter-option mr-2">
                <div class="dropdown">
                    <button class="btn btn-third dropdown-toggle" type="button" id="noiseLevelDropdownButton" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                        @if (SelectedNoiseFilter == null)
                        {
                            <i class="fi fi-bs-volume" style="font-size: 20px; margin-right: 6px;"></i><text>Noise Level</text>
                        }
                        else
                        {
                            @GetDropdownDisplayText(SelectedNoiseFilter) 
                        }
                    </button>
                    <div class="dropdown-menu" aria-labelledby="noiseLevelDropdownButton">
                        <button class="dropdown-item" type="button" test-id="dropdown8" @onclick="() => UpdateNoiseLevel(null)">
                            All
                        </button>
                        @foreach (var name in Enum.GetNames(typeof(NoiseLevelEnum)))
                        {
                            if (name != "Undefined")
                            {
                                var displayName = GetDropdownDisplayText(Enum.Parse<NoiseLevelEnum>(name));
                                <button class="dropdown-item" type="button" test-id="dropdown9" @onclick="() => UpdateNoiseLevel(Enum.Parse<NoiseLevelEnum>(name))">
                                    @displayName
                                </button>
                            }
                        }
                    </div>
                </div>
            </div>

            <!-- Search and Filter Options -->
            <div class="filter-option flex-grow-1">
                <div class="search-bar">
                    <input type="text" id="filter-input" class="form-control" @onchange="(e) => UpdateFilterText(e.Value.ToString())" value="@_filterDataString" placeholder="Search by Title...">
                    <div class="search-bar-buttons">
                        <button @onclick="(e => EnableFilterData())" class="btn btn-secondary" id="filter-button">Filter</button>
                        <button @onclick="(e => ClearFilterData())" class="btn btn-secondary" id="clear-button">Clear</button>
                    </div>
                </div>
            </div>

        </div>
    </div>
</div>

<div class="container pb-3">
    <!-- Start of card layout -->
    <div class="card-columns">
        @foreach (var product in FilterProducts())
        {
            <div class="card">
                <div class="card-img" style="background-image: url('@product.Image');"></div>
                <div class="card-body">
                    <h5 class="card-title">@product.Title</h5>
                    <h7 class="card-title">@product.Neighborhood</h7>
                    <p class="card-text">@product.LocationType</p>
                </div>
                <div class="card-footer">
                    <small class="text-muted">
                        <!-- Updated data - target to point to a unique modal ID based on the product ID -->
                        <button @onclick="(e => SelectProduct(product.Id))" test-id="MoreInfo_@product.Id" data-toggle="modal" data-target="#productModal-@product.Id" class="btn btn-primary">
                            More Info
                        </button>
                    </small>
                </div>
            </div>
        }
    </div>

    <!-- End of card layout -->
    @if (_selectedProduct == null && surpriseCheck == false)
    {
        _selectedProduct = ProductService.GetProducts().First();
    }


    @foreach (var product in FilterProducts())
    {
        <div class="modal fade" id="productModal-@product.Id" tabindex="-1" role="dialog" aria-labelledby="productModalLabel-@product.Id">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="productModalLabel-@product.Id">@product.Title</h5>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                            <span aria-hidden="true">&times;</span>
                        </button>
                    </div>
                    <div class="modal-body">
                        <!-- Keep this image static at the top of the modal -->
                        <div class="static-img" style="background-image: url('@product.Image'); height: 30vw; background-size: 100% 100%;"></div>

                        <!-- Nav tabs -->
                        <ul class="nav nav-tabs" id="productTab-@product.Id" role="tablist">
                            <li class="nav-item">
                                <a class="nav-link card-tab active" id="description-tab-@product.Id" data-toggle="tab" href="#description-@product.Id" role="tab" aria-controls="description" aria-selected="true">Description</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link card-tab" id="map-tab-@product.Id" data-toggle="tab" href="#map-@product.Id" role="tab" aria-controls="map" aria-selected="false">Map</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link card-tab" id="funfact-tab-@product.Id" data-toggle="tab" href="#funfact-@product.Id" role="tab" aria-controls="funfact" aria-selected="false">Fun Facts</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link card-tab" id="comments-tab-@product.Id" data-toggle="tab" href="#comments-@product.Id" role="tab" aria-controls="comments" aria-selected="false">Comments</a>
                            </li>
                            <!-- More tabs as needed -->
                        </ul>

                        <!-- Tab panes -->
                        <div class="tab-content">
                            <div class="tab-pane fade show active" id="description-@product.Id" role="tabpanel" aria-labelledby="description-tab">@product.Description</div>
                            <div class="tab-pane fade" id="map-@product.Id" role="tabpanel" aria-labelledby="map-tab">
                                <iframe src="@product.MapURL" width="100%" height="450" allowfullscreen></iframe>
                            </div>
                            <div class="tab-pane fade" id="funfact-@product.Id" role="tabpanel" aria-labelledby="funfact-tab">@product.FunFacts</div>
                            <div class="tab-pane fade" id="comments-@product.Id" role="tabpanel" aria-labelledby="comments-tab">
                                @{
                                    if (product.CommentList != null)
                                    {
                                        <div class="card" style="width: auto;">
                                            <ul class="list-group list-group-flush">
                                                @foreach (var comment in product.CommentList)
                                                {
                                                    <li class="list-group-item">@comment</li>
                                                }
                                            </ul>
                                        </div>
                                        <br />

                                        // If this is a new comment, then add the Input boxes for it, else show the Add Comment Button
                                        if (_newComment)
                                        {
                                            <div class="row text-center">
                                                <div class="col">
                                                    <input class="shadow-7 border" type="text" @bind="_newCommentText" id="CommentInput" test-id="new_comment_input" />
                                                </div>
                                            </div>
                                            <br />
                                            <div class="row text-center">
                                                <div class="col">
                                                    <button @onclick="(e => AddComment(product,_newCommentText))" test-id="add_comment_button" class="btn btn-outline-success" data-mdb-ripple-color="dark" data-toggle="modal">Save Comment</button>
                                                    <button type="button" class="btn btn-outline-danger" data-mdb-ripple-color="dark" data-dismiss="modal">Cancel</button>
                                                </div>
                                            </div>
                                        }

                                        // If this is not a new comment, then show the buttons for Adding comment and Close
                                        if (_newComment == false)
                                        {
                                            <div class="row text-center">
                                                <div class="col-sm">
                                                    <button @onclick="(e => ShowNewCommentInput())" test-id="new_comment_button" id="AddComment" class="btn btn-outline-primary" data-mdb-ripple-color="dark">Add Comment</button>
                                                    <button type="button" class="btn btn-outline-danger" data-mdb-ripple-color="dark" data-dismiss="modal">Close</button>
                                                </div>
                                            </div>
                                        }
                                    }
                                }
                            </div>
                            <!--More tab content as needed-->
                        </div>
                    </div>

                    <div class="modal-footer">
                        <div class="container">
                            <div class="row align-items-center">
                                <div class="col-md-6">
                                    <div class="d-flex justify-content-start">
                                        <!-- Social media toggle button on the left -->
                                        <div>
                                            <button @onclick="ToggleSocialIcons" test-id="ToggleSocialButtons" class="btn btn-primary btn-social" style="width: 50px;">
                                                <i class="fa fa-share-alt fa-2x"></i>
                                            </button>
                                        </div>
                    
                                        <!-- Facebook sharing button (Initially hidden) -->
                                        <div style="display: @(showSocialIcons ? "block" : "none");">
                                            <a class="btn btn-primary btn-social mx-1" href="https://facebook.com/sharer/sharer.php?u=@GetProductUrl(_selectedProductId)" style="background-color: #3b5998;">
                                                <i class="fab fa-facebook-f fa-2x"></i>
                                            </a>
                                        </div>
                    
                                        <!-- Twitter sharing button (Initially hidden) -->
                                        <div style="display: @(showSocialIcons ? "block" : "none");">
                                            <a class="btn btn-primary btn-social mx-1" href="https://twitter.com/intent/tweet?text=Look%2C%20I%20found%20a%20good%20place%20to%20rest%20and%20Take%20a%20Break!!%20Check%20it%20out.&url=@GetProductUrl(_selectedProductId)" style="background-color: #55acee;">
                                                <i class="fab fa-twitter fa-2x"></i>
                                            </a>
                                        </div>
                                        
                                        <!-- Email sharing button (Initially hidden) -->
                                        <div style="display: @(showSocialIcons ? "block" : "none");">
                                            <a class="btn btn-primary btn-social mx-1" href="mailto:?subject=Look%2C%20I%20found%20a%20good%20place%20to%20rest%20and%20Take%20a%20Break!!%20Check%20it%20out.&body=@GetProductUrl(_selectedProductId)" style="background-color: #332D2D;">
                                                <i class="far fa-envelope fa-2x"></i>
                                            </a>
                                        </div>
                                        
                                        <!-- Pinterest sharing button (Initially hidden) -->
                                        <div style="display: @(showSocialIcons ? "block" : "none");">
                                            <a class="btn btn-primary btn-social mx-1" href="https://pinterest.com/pin/create/button/?url=@GetProductUrl(_selectedProductId)&description=Look%2C%20I%20found%20a%20good%20place%20to%20rest%20and%20Take%20a%20Break!!%20Check%20it%20out." style="background-color: #c61118;">
                                                <i class="fab fa-pinterest fa-2x"></i>
                                            </a>
                                        </div>
                                        
                                        <!-- LinkedIn sharing button (Initially hidden) -->
                                        <div style="display: @(showSocialIcons ? "block" : "none");">
                                            <a class="btn btn-primary btn-social mx-1" href="https://www.linkedin.com/shareArticle?mini=true&amp;url=@GetProductUrl(_selectedProductId)&amp;title=Check%20this%20out" style="background-color: #0082ca;">
                                                <i class="fab fa-linkedin-in fa-2x"></i>
                                            </a>
                                        </div>
                                        
                                        <!-- WhatsApp sharing button (Initially hidden) -->
                                        <div style="display: @(showSocialIcons ? "block" : "none");">
                                            <a class="btn btn-primary btn-social mx-1" href="https://wa.me/?text=Look%2C%20I%20found%20a%20good%20place%20to%20rest%20and%20Take%20a%20Break!!%20Check%20it%20out.@GetProductUrl(_selectedProductId)" target="_blank" style="background-color: #25d366;">
                                                <i class="fab fa-whatsapp fa-2x"></i>
                                            </a>
                                        </div>
                                        
                                        <!-- Telegram sharing button (Initially hidden) -->
                                        <div style="display: @(showSocialIcons ? "block" : "none");">
                                            <a class="btn btn-primary btn-social mx-1" href="https://t.me/share/url?url=@GetProductUrl(_selectedProductId)&text=Check%20this%20out%20on%20Telegram" target="_blank" style="background-color: #0088cc;">
                                                <i class="fab fa-telegram fa-2x"></i>
                                            </a>
                                        </div>
                                    </div>
                                </div>
                                <div class="col-md-6 d-flex justify-content-end align-items-end">
                                    <!-- Votes container centered -->
                                    <div class="d-flex align-items-center ml-auto"> <!-- Use ml-auto here -->
                                        @if (product.Ratings == null || !product.Ratings.Any())
                                        {
                                            <span class="mr-2">Be the first to vote!</span>
                                        }
                                        else
                                        {
                                            <span class="mr-2">@product.Ratings.Count() @(product.Ratings.Count() == 1 ? "Vote" : "Votes")</span>
                                        }
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            var currentStar = i;
                                            <span test-id="vote_button" class="fas fa-chair mr-1 @(product.Ratings != null && i <= product.Ratings.Average() ? "checked" : "")" @onclick="(e => SubmitRating(product.Id, currentStar))"></span>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>


                </div> 
            </div>
            </div>
     
     
    }
</div>


@code {
    
    // The selected product model 
    ProductModel _selectedProduct;
    
    // String that holds the product id 
    string _selectedProductId;
    
    // Noise level integer originally set to null
    private NoiseLevelEnum? SelectedNoiseFilter = null;
    
    // String to hold "Surprise" 
    string surpriseString = "Surprise";
    
    // Set the check to false on initial load 
    bool surpriseCheck = false;
    
    // To hold the randomly selected product 
    ProductModel randomProduct;

    /// <summary>
    /// Selects a product based on the given product ID.
    /// </summary>
    /// <param name="productId">The ID of the product to select.</param>
    void SelectProduct(string productId)
    {
        _selectedProductId = productId;
        _selectedProduct = ProductService.GetProducts().FirstOrDefault(m => m.Id.Equals(_selectedProductId));
    }

    private IEnumerable<string> Neighborhoods => Products
        .Select(p => p.Neighborhood)
        .Distinct()
        .OrderBy(n => n);

    /// <summary>
    /// Checks if the Surprise link has been clicked.
    /// </summary>
    /// <returns>Returns true if the Surprise link is clicked.</returns>
    bool isSurprise()
    {
        surpriseCheck = true;
        return surpriseCheck;
    }
    
    /// <summary>
    /// Stores the previously selected product.
    /// </summary>
    /// <param name="selectedProduct">The product to store as the previous selection.</param>
    public void storePrevious(ProductModel selectedProduct)
    {
        randomProduct = selectedProduct;
    }
    // Variable to get all the products, Neighborhoods and LocationType (for drop down)
    private IEnumerable<ProductModel> Products => ProductService.GetProducts();

    // <summary>
    /// Filters products based on the current filtering criteria.
    /// </summary>
    /// <returns>A list of filtered products.</returns>
    private List<ProductModel> FilterProducts()
    {
        //If the surprise link has been click, this should find and store a random location
        if (surpriseCheck)
        {
            ProductModel selectedProduct;
            if (randomProduct == null)
            {
                Random rand = new Random();
                var items = ProductService.GetProducts();
                
                // Number of random items you want to select
                var numberOfItemsinJson = items.Count(); 
    
                //Generating random values
                int randomIndex = rand.Next(numberOfItemsinJson);
                
                //Getting all the titles and checking for the random number index
                List<string> titleList = ProductService.GetTitles();
                
                // To hold the title of the random product 
                var randomItemTitle = titleList[randomIndex];
                
                // Select the product 
                selectedProduct = Products.FirstOrDefault(m => m.Id.Equals(randomItemTitle));
                
                //Storing the value for once generated location
                storePrevious(selectedProduct);
                return new List<ProductModel> { selectedProduct };
            }
            else
            {
                return new List<ProductModel> { randomProduct };
            }
        }
        else
        {
            return Products.Where(IsProductMatch).ToList();
        }
    }
    
    /// <summary>
    /// Checks if the given product matches the current filter criteria.
    /// </summary>
    /// <param name="product">The product to check against the filter criteria.</param>
    /// <returns>True if the product matches the filter criteria.</returns>
    private bool IsProductMatch(ProductModel product)
    {
        // Check for neighborhood match 
        if (IsNeighborhoodMatch(product) == false)
        {
            return false;
        }
        
        // Check for location-type match 
        if (IsLocationTypeMatch(product) == false)
        {
            return false;
        }
        
        // Check for noise level match 
        if (IsNoiseLevelMatch(product) == false)
        {

            return false;
        }
        
        // Check for product match 
        if (IsTitleMatch(product) == false)
        {
            return false;
        }

        return true;
    }

    // The neighborhood selected from drop down
    public string SelectedNeighborhood;

    // The location type selected from drop down
    [Parameter]
    public string SelectedLocationType { get; set; }

    // The max noise level
    private int? SelectedNoiseLevelMax;

    // The min noise level
    private int? SelectedNoiseLevelMin;
    
    // Set the filtered string to an empty string
    string _filterDataString = "";
    
    // Set filtered flag to false 
    bool _filterData = false;

    /// <summary>
    /// Checks if the product's neighborhood matches the selected neighborhood.
    /// </summary>
    /// <param name="product">The product to check.</param>
    /// <returns>True if the product's neighborhood matches or if no neighborhood is selected.</returns>
    private bool IsNeighborhoodMatch(ProductModel product)
    {
        if (string.IsNullOrWhiteSpace(SelectedNeighborhood))
            return true;

        return product.Neighborhood.Equals(SelectedNeighborhood, StringComparison.OrdinalIgnoreCase);
    }
    
    /// <summary>
    /// Checks if the product's location type matches the selected location type.
    /// </summary>
    /// <param name="product">The product to check.</param>
    /// <returns>True if the product's location type matches or if no location type is selected.</returns>
    private bool IsLocationTypeMatch(ProductModel product)
    {
        if (string.IsNullOrWhiteSpace(SelectedLocationType))
            return true;

        return product.LocationType.Equals(SelectedLocationType, StringComparison.OrdinalIgnoreCase);
    }

    /// <summary>
    /// Checks if the product's noise level matches the selected noise level range.
    /// </summary>
    /// <param name="product">The product to check.</param>
    /// <returns>True if the product's noise level is within the selected range.</returns>
    private bool IsNoiseLevelMatch(ProductModel product)
    {
        // Check if both min and max values are not set
        if (!SelectedNoiseLevelMin.HasValue && !SelectedNoiseLevelMax.HasValue)
        {
            return true;
        }

        // Check if product's noise level is greater than or equal to it
        bool minMatch = product.NoiseLevel >= SelectedNoiseLevelMin.Value;

        // Check if product's noise level is less than or equal to it
        bool maxMatch = product.NoiseLevel <= SelectedNoiseLevelMax.Value;

        return minMatch && maxMatch;
    }

    /// <summary>
    /// Checks if the product's title matches the filter text.
    /// </summary>
    /// <param name="product">The product to check.</param>
    /// <returns>True if the product's title contains the filter text.</returns>
    private bool IsTitleMatch(ProductModel product)
    {
        if (string.IsNullOrWhiteSpace(_filterDataString))
            return true;

        if (_filterData)
            return product.Title.Contains(_filterDataString, StringComparison.OrdinalIgnoreCase);

        return false;
    }

    /// <summary>
    /// Event callback for when ratings change
    /// <param name="productId"></param>
    /// <param name="rating"></param>
    /// </summary>
    void SubmitRating(string productId, int rating)
    {
        System.Console.WriteLine($"Rating received for product {productId}: {rating}");
        ProductService.AddRating(productId, rating);
    }

    // New Comment Flag to show the input box or not
    bool _newComment = false;

    // Next Comment Text is what the comment text is
    string _newCommentText = string.Empty;

    /// <summary>
    /// Enable the New Comment Entry by setting the NewComment flag
    /// </summary>
    void ShowNewCommentInput()
    {
        _newCommentText = String.Empty;
        // Setting the new Comment flag to true will show the input box
        _newComment = true;
    }

    /// <summary>
    /// Add the comment to the product
    /// Best to refactor this to be a method to call in the Middle Tier Data service, rather than putting the logic here...
    /// </summary>
    /// <param name="selectedProduct"></param>
    /// <param name="newCommentText"></param>
    void AddComment(ProductModel selectedProduct, string newCommentText)
    {
        //Date time for the comment
        string _timestamp = DateTime.Now.ToString("MM/dd/yyyy h:mm tt") + " - ";

        // Comment should not be empty
        if (string.IsNullOrWhiteSpace(newCommentText))
        {
            _newComment = false;
        }
        else
        {
            newCommentText = _timestamp + newCommentText;
            // Add it to the Comment List
            bool result = ProductService.AddComment(selectedProduct.Id, newCommentText);

            // Set the NewComment flag to false to hide the input box
            _newComment = false;
        }
    }

    void UpdateFilterText(string text)
    {
        _filterDataString = text;
    }
    
    /// <summary>
    /// Enables the filter 
    /// </summary>
    void EnableFilterData()
    {
        // If the Filter is enabled, set the filter flag
        _filterData = true;
    }
    
    /// <summary>
    /// Clears the filter 
    /// </summary>
    void ClearFilterData()
    {
        // If the Filter is enabled, set the filter flag
        _filterData = false;
        _filterDataString = "";
    }

    /// <summary>
    /// To update the location type
    /// </summary>
    void UpdateLocationType(string locationType)
    {
        SelectedLocationType = locationType;
    }

    /// <summary>
    /// Updates neighborhood
    /// </summary>
    void UpdateNeighborhood(string neighborhood)
    {
        SelectedNeighborhood = neighborhood;
    }

    /// <summary>
    /// Updates noise level
    /// <param name="NoiseLevel"></param>
    /// </summary>
    void UpdateNoiseLevel(NoiseLevelEnum? noiseLevel)
    {
        SelectedNoiseFilter = noiseLevel;

        if (noiseLevel == null)
        {
            SelectedNoiseLevelMin = null;
            SelectedNoiseLevelMax = null;
        }

        else
        {
            int enumValue = (int)noiseLevel;
            SelectedNoiseLevelMin = enumValue;
            SelectedNoiseLevelMax = enumValue + 1;
        }

    }

    /// <summary>
    /// Gets the display name from the enum for the drop down
    /// /// <param name="selectedLevel"></param>
    /// </summary>
    private string GetDropdownDisplayText(NoiseLevelEnum? selectedLevel)
    {
        
        var enumType = typeof(NoiseLevelEnum);
        var enumValue = Enum.GetName(enumType, selectedLevel);
        var memberInfos = enumType.GetMember(enumValue);
        var enumValueMemberInfo = memberInfos.FirstOrDefault(m => m.DeclaringType == enumType);

        var displayAttribute = enumValueMemberInfo.GetCustomAttributes(typeof(DisplayAttribute), false).FirstOrDefault() as DisplayAttribute;

        return displayAttribute.Name;

    }
    
    /// <summary>
    /// Gets current product ID 
    /// </summary>
    [JSInvokable]
    public string GetCurrentProductId()
    {
        return _selectedProductId;
    }
    
    // Sets the icon flag to false initially 
    private bool showSocialIcons = false;

    /// <summary>
    /// Toggles social media button
    /// </summary>
    private async Task ToggleSocialIcons()
    {
        // Your code here
        showSocialIcons = !showSocialIcons;
    }

    /// <summary>
    /// Helper method to get url  
    /// </summary>
    private string GetProductUrl(string productId)
    {
        // Construct URL to product 
        string productUrl = $"https://takeabreak.azurewebsites.net/{productId}";

        return Uri.EscapeUriString(productUrl);
    }
}