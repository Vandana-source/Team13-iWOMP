@using TakeABreak.WebSite.Models
@using TakeABreak.WebSite.Services
@using Microsoft.AspNetCore.Components.Web
@inject JsonFileProductService ProductService

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css">
<link rel="stylesheet" href="~/css/site.css" />
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">

<div id="filter-bar">
    <div class="filter-option">
        <select class="filter-dropdown" @onchange="OnNeighborhoodChanged">
            <option value="">Neighborhood</option>
            @foreach (var neighborhood in Neighborhoods)
            {
                <option value="@neighborhood">@neighborhood</option>
            }
        </select>
    </div>
    <div class="filter-option">
        <select class="filter-dropdown" @onchange="OnLocationTypeChanged">
            @{
                <option value="">Location Type</option>
                <option value="Bench">Benchü™ë</option>
                <option value="Restroom">Restroomüöª</option>
                <option value="Table">Tableüî≥</option>
                <option value="Other">OtherüèûÔ∏è</option>
            }
        </select>
    </div>
    <div class="filter-option">
        <select class="filter-dropdown" @onchange="OnNoiseLevelTypeChanged">
            <option value="">Noise Level</option>
            @for (int i = 1; i <= 10; i++)
            {
                <option value="@i">@i</option>
            }
        </select>
    </div>
    <div class="row">
        <div class="col-md-8">
            <div class="input-group">
                <input type="text" class="form-control" @onchange="(e) => UpdateFilterText(e.Value.ToString())" value="@FilterDataString" placeholder="Search by Title...">
                <div class="input-group-append">
                    <button @onclick="(e => EnableFilterData())" class="btn btn-primary">Filter</button>
                    <button @onclick="(e => ClearFilterData())" class="btn btn-secondary">Clear</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Start of card layout -->
<div class="card-columns">
    @foreach (var product in FilterProducts())
    {
        <div class="card">
            <div class="card-img" style="background-image: url('@product.Image');"></div>
            <div class="card-body">
                <h5 class="card-title">@product.Title</h5>
                <h7 class="card-title">@product.Neighborhood</h7>
                <p class="card-text">@product.LocationType</p>
            </div>
            <div class="card-footer">
                <small class="text-muted">
                    <!-- Updated data - target to point to a unique modal ID based on the product ID -->
                    <button data-toggle="modal" data-target="#productModal-@product.Id" class="btn btn-primary">
                        More Info
                    </button>
                </small>
            </div>
        </div>
    }
</div>
<!-- End of card layout -->

@foreach (var product in FilterProducts())
{
    <div class="modal fade" id="productModal-@product.Id" tabindex="-1" role="dialog" aria-labelledby="productModalLabel-@product.Id">
        <div class="modal-dialog modal-lg" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="productModalLabel-@product.Id">@product.Title</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <!-- Keep this image static at the top of the modal -->
                    <div class="static-img" style="background-image: url('@product.Image'); height: 30vw; background-size: cover;"></div>

                    <!-- Nav tabs -->
                    <ul class="nav nav-tabs" id="productTab-@product.Id" role="tablist">
                        <li class="nav-item">
                            <a class="nav-link active" id="description-tab-@product.Id" data-toggle="tab" href="#description-@product.Id" role="tab" aria-controls="description" aria-selected="true">Description</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" id="map-tab-@product.Id" data-toggle="tab" href="#map-@product.Id" role="tab" aria-controls="map" aria-selected="false">Map</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" id="funfact-tab-@product.Id" data-toggle="tab" href="#funfact-@product.Id" role="tab" aria-controls="funfact" aria-selected="false">Fun Facts</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" id="comments-tab-@product.Id" data-toggle="tab" href="#comments-@product.Id" role="tab" aria-controls="comments" aria-selected="false">Comments</a>
                        </li>
                        <li class="nav-item">
                            <a class="nav-link" id="share-tab-@product.Id" data-toggle="tab" href="#share-@product.Id" role="tab" aria-controls="share" aria-selected="false">Share</a>
                        </li>
                        <!-- More tabs as needed -->
                    </ul>

                    <!-- Tab panes -->
                    <div class="tab-content">
                        <div class="tab-pane fade show active" id="description-@product.Id" role="tabpanel" aria-labelledby="description-tab">@product.Description</div>
                        <div class="tab-pane fade" id="map-@product.Id" role="tabpanel" aria-labelledby="map-tab">
                            <iframe src="@product.MapURL" width="100%" height="450" allowfullscreen></iframe>
                        </div>
                        <div class="tab-pane fade" id="funfact-@product.Id" role="tabpanel" aria-labelledby="funfact-tab">@product.FunFacts</div>
                        <div class="tab-pane fade" id="comments-@product.Id" role="tabpanel" aria-labelledby="comments-tab">
                            @{
                                foreach (var comment in product.CommentList)
                                {
                                    <div class="row">@comment</div>
                                }

                                // If this is a new comment, then add the Input boxes for it, else show the Add Comment Button
                                if (NewComment)
                                {
                                    <div class="row text-center">
                                        <div class="col">
                                            <input class="shadow-7 border" type="text" @onchange="(e) => UpdateCommentText(e.Value.ToString())" value="@NewCommentText" id="CommentInput" />
                                        </div>
                                    </div>
                                    <br />
                                    <div class="row text-center">
                                        <div class="col">
                                            <button @onclick="(e => AddComment(product,NewCommentText))" class="btn btn-outline-success" data-mdb-ripple-color="dark" data-toggle="modal">Save Comment</button>
                                            <button type="button" class="btn btn-outline-danger" data-mdb-ripple-color="dark" data-dismiss="modal">Cancel</button>
                                        </div>
                                    </div>
                                }

                                // If this is not a new comment, then show the buttons for Adding comment and Close
                                if (NewComment == false)
                                {
                                    <div class="row text-center">
                                        <div class="col-sm">
                                            <button @onclick="(e => ShowNewCommentInput())" id="AddComment" class="btn btn-outline-primary" data-mdb-ripple-color="dark">Add Comment</button>
                                            <button type="button" class="btn btn-outline-danger" data-mdb-ripple-color="dark" data-dismiss="modal">Close</button>
                                        </div>
                                    </div>
                                }
                            }
                        </div>
                        <div class="tab-pane fade" id="share-@product.Id" role="tabpanel" aria-labelledby="share-tab">
                            <div class="container">
                                <div class="row">
                                    <div class="index-textcontainer">
                                        <!-- Sharingbutton Facebook -->
                                        @{
                                            string fblink = "https://facebook.com/sharer/sharer.php?u=https%3A%2F%2Ftakeabreak.azurewebsites.net%2FProduct%2FRead%2F" + product.Id;
                                        }
                                        <a class="btn text-white" style="background-color: #3b5998;" href="@fblink" role="button">
                                            <i class="fab fa-facebook-f"></i>
                                        </a>

                                        <!-- Sharingbutton Twitter -->
                                        @{
                                            string tlink = "https://twitter.com/share?text=Look%2C%20I%20found%20a%20good%20place%20to%20rest%20and%20Take%20a%20Break!!%20Check%20it%20out.&amp&url=https%3A%2F%2Ftakeabreak.azurewebsites.net%2FProduct%2FRead%2F" + product.Id;
                                        }
                                        <a class="btn text-white" style="background-color: #55acee;" href="@tlink" role="button">
                                            <i class="fab fa-twitter"></i>
                                        </a>

                                        <!-- Sharingbutton E-Mail -->
                                        @{
                                            string elink = "mailto:?subject=Look%2C%20I%20found%20a%20good%20place%20to%20rest%20and%20Take%20a%20Break!!%20Check%20it%20out.&amp&body=https%3A%2F%2Ftakeabreak.azurewebsites.net%2FProduct%2FRead%2F" + product.Id;
                                        }
                                        <a class="btn text-white" style="background-color: #332D2D;" href="@elink" role="button">
                                            <i class="far fa-envelope"></i>
                                        </a>

                                        <!-- Sharingbutton Pinterest -->
                                        @{
                                            string plink = "https%3A%2F%2Ftakeabreak.azurewebsites.net%2FProduct%2FRead%2F" + product.Id + "&amp";
                                        }
                                        <a class="btn text-white" style="background-color: #c61118;" href="https://pinterest.com/pin/create/button/?url=https%3A%2F%2Ftakeabreak.azurewebsites.net%2FProduct%2FRead%2Fabc&amp;media=@plink;description=Look%2C%20I%20found%20a%20good%20place%20to%20rest%20and%20Take%20a%20Break!!%20Check%20it%20out." role="button">
                                            <i class="fab fa-pinterest"></i>
                                        </a>

                                        <!-- Sharingbutton LinkedIn -->
                                        @{
                                            string llink = "https%3A%2F%2Ftakeabreak.azurewebsites.net%2FProduct%2FRead%2F" + product.Id;
                                        }
                                        <a class="btn text-white" style="background-color: #0082ca;" href="https://www.linkedin.com/sharing/share-offsite/?url=@llink&title=Look%2C%20I%20found%20a%20good%20place%20to%20rest%20and%20Take%20a%20Break!!%20Check%20it%20out." role="button">
                                            <i class="fab fa-linkedin-in"></i>
                                        </a>

                                        <!-- Sharingbutton WhatsApp -->
                                        @{
                                            string wlink = "https://api.whatsapp.com/send?text=Look%2C%20I%20found%20a%20good%20place%20to%20rest%20and%20Take%20a%20Break!!%20Check%20it%20out.%20https%3A%2F%2Ftakeabreak.azurewebsites.net%2FProduct%2FRead%2F" + product.Id;
                                        }
                                        <a class="btn text-white" style="background-color: #25d366;" href="@wlink" role="button">
                                            <i class="fab fa-whatsapp"></i>
                                        </a>

                                        <!-- Sharingbutton Telegram -->
                                        @{
                                            string telegramLink = "https%3A%2F%2Ftakeabreak.azurewebsites.net%2FProduct%2FRead%2F" + product.Id;
                                        }
                                        <a class="btn text-white" style="background-color: #229ED9;" href="https://t.me/share/url?url=@telegramLink&text=Look%2C%20I%20found%20a%20good%20place%20to%20rest%20and%20Take%20a%20Break!!%20Check%20it%20out." role="button">
                                            <i class="fab fa-telegram"></i>
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!--More tab content as needed-->
                    </div>
                </div>

                <div class="modal-footer">
                    @if (product.Ratings == null || !product.Ratings.Any())
                    {
                        <span>Be the first to vote!</span>
                    }
                    else
                    {
                        <span>@product.Ratings.Count() @(product.Ratings.Count() == 1 ? "Vote" : "Votes")</span>
                    }
                    <!--Updated the for loop to use product ID-->
                    @for (int i = 1; i <= 5; i++)
                    {
                        var currentStar = i;
                        <span class="fa fa-thumbs-up @(product.Ratings != null && i <= product.Ratings.Average() ? "checked" : "")" @onclick="(e => SubmitRating(product.Id, currentStar))"></span>
                    }
                </div>

            </div>
        </div>
       </div>

        }

        @code {

            // Variable to get all the products, Neighborhoods and LocationType (for drop down)
private IEnumerable<ProductModel> Products => ProductService.GetProducts();
        private IEnumerable<string> Neighborhoods => Products
            .Select(p => p.Neighborhood)
            .Distinct()
            .OrderBy(n => n);

        // The neighborhood selected from drop down
        private string selectedNeighborhood;

        // The location type selected from drop down
        [Parameter]
        public string selectedLocationType { get; set; }

        // The noise level type selected from drop down
        private int? selectedNoiseLevel;

        string FilterDataString = "";
        bool FilterData = false;

        // Computed method to get the filtered list of products
        private List<ProductModel> FilterProducts()
        {
            // Implement logic to filter products based on the Filter parameter
            // For example:
            System.Console.WriteLine($"Rating received for product {selectedLocationType}");
            if (selectedLocationType == "All")
            {
                return Products.ToList();
            }
            var filteredProducts = Products
                .Where(p =>
                    (string.IsNullOrWhiteSpace(selectedNeighborhood) || p.Neighborhood.Equals(selectedNeighborhood, StringComparison.OrdinalIgnoreCase)) &&
                    (string.IsNullOrWhiteSpace(selectedLocationType) || p.LocationType.Equals(selectedLocationType, StringComparison.OrdinalIgnoreCase)) &&
                    (!selectedNoiseLevel.HasValue || p.NoiseLevel == selectedNoiseLevel.Value) &&
                    (string.IsNullOrWhiteSpace(FilterDataString) || FilterData == false || p.Title.Contains(FilterDataString))
                ).ToList();
            return filteredProducts;
        }

        /// <summary>
        /// Event callback for when drop down neighborhood changes
        ///</summary>
        private void OnNeighborhoodChanged(ChangeEventArgs e)
        {
            selectedNeighborhood = e.Value?.ToString();

            // Trigger a re-render of the component
            StateHasChanged();
        }

        /// <summary>
        /// Event callback for when drop down LocationType changes
        ///</summary>
        private void OnLocationTypeChanged(ChangeEventArgs e)
        {
            selectedLocationType = e.Value?.ToString();

            // Trigger a re-render of the component
            StateHasChanged();
        }

        /// <summary>
        /// Event callback for when drop down NoiseLevel changes
        /// </summary>
        private void OnNoiseLevelTypeChanged(ChangeEventArgs e)
        {

            // Try to get the noise level
            if (int.TryParse(e.Value?.ToString(), out int result))
            {
                selectedNoiseLevel = result;
            }
            else
            {
                // Reset or handle the invalid input appropriately
                selectedNoiseLevel = null;
            }

            // Trigger a re-render of the component
            StateHasChanged();
        }

        /// <summary>
        /// Event callback for when ratings change
        /// </summary>
        void SubmitRating(string productId, int rating)
        {
            System.Console.WriteLine($"Rating received for product {productId}: {rating}");
            ProductService.AddRating(productId, rating);
        }

        // New Comment Flag to show the input box or not
        bool NewComment = false;

        // Next Comment Text is what the comment text is
        string NewCommentText = string.Empty;

        //Date time for the comment
        string timestamp = DateTime.Now.ToString("MM/dd/yyyy h:mm tt") + " - ";

        /// <summary>
        /// Enable the New Comment Entry by setting the NewComment flag
        /// </summary>
        /// <param name="comment"></param>
        void ShowNewCommentInput()
        {
            // Setting the new Comment flag to true will show the input box
            NewComment = true;
        }

        /// <summary>
        /// Set the New Comment Text variable to the data just entered in the input box
        /// </summary>
        /// <param name="newCommentText"></param>
        void UpdateCommentText(string newCommentText)
        {
            NewCommentText = newCommentText;
        }

        /// <summary>
        /// Add the comment to the product
        /// Best to refactor this to be a method to call in the Middle Tier Data service, rather than putting the logic here...
        /// </summary>
        /// <param name="comment"></param>
        void AddComment(ProductModel selectedProduct, string NewCommentText)
        {
            // Comment should not be empty
            if (string.IsNullOrWhiteSpace(NewCommentText))
            {
                NewComment = false;
            }
            else
            {
                NewCommentText = timestamp + NewCommentText;
                // Add it to the Comment List
                bool result = ProductService.AddComment(selectedProduct.Id, NewCommentText);

                // Set the NewComment flag to false to hide the input box
                NewComment = false;
            }
        }

        void UpdateFilterText(string text)
        {
            FilterDataString = text;
        }

        void EnableFilterData()
        {
            // If the Filter is enabled, set the filter flag
            FilterData = true;
        }

        void ClearFilterData()
        {
            // If the Filter is enabled, set the filter flag
            FilterData = false;
            FilterDataString = "";
        }
        }
